// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreUniversity.Context.DataBase;

#nullable disable

namespace StoreUniversity.Context.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreUniversityModels.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsInsoon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsInsoon = false,
                            Name = "لب تاب"
                        },
                        new
                        {
                            Id = 2,
                            IsInsoon = false,
                            Name = "ساعت"
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Offcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Offcodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Develop",
                            Percent = 30
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronic",
                            Percent = 60
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SellRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "این محصول درجه یک است",
                            Name = "محصول 1",
                            Price = 12000000,
                            SellRate = 80
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "این محصول درجه یک است",
                            Name = "محصول 2",
                            Price = 12000000,
                            SellRate = 20
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "این محصول درجه یک است",
                            Name = "محصول 3",
                            Price = 12000000,
                            SellRate = 11
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "این محصول درجه یک است",
                            Name = "محصول 4",
                            Price = 12000000,
                            SellRate = 10
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "این محصول درجه یک است",
                            Name = "محصول 5",
                            Price = 12000000,
                            SellRate = 10
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.Product.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = 1,
                            ImageName = "Meghdadit[dot]com.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ProductImageId = 2,
                            ImageName = "Meghdadit[dot]watchcom.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ProductImageId = 3,
                            ImageName = "Meghdadit[dot]com.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ProductImageId = 4,
                            ImageName = "Meghdadit[dot]com.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ProductImageId = 5,
                            ImageName = "Meghdadit[dot]watchcom.jpg",
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.Product.ProductsTOOffcodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("OffCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OffCodeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsTOOffcodes");
                });

            modelBuilder.Entity("StoreUniversityModels.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 101,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Email = "Admin@gmail.com",
                            Image = "user.png",
                            Password = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.User.UserRelations.User_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersTORoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 100,
                            UserId = 100
                        });
                });

            modelBuilder.Entity("StoreUniversityModels.User.User_Favorits", b =>
                {
                    b.Property<int>("UserFavoritId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFavoritId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFavoritId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorits");
                });

            modelBuilder.Entity("StoreUniversityModels.Wallet.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("StoreUniversityModels.Wallet.WalletType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeId");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Product", b =>
                {
                    b.HasOne("StoreUniversityModels.Product.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.ProductImage", b =>
                {
                    b.HasOne("StoreUniversityModels.Product.Product", "Product")
                        .WithMany("images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.ProductsTOOffcodes", b =>
                {
                    b.HasOne("StoreUniversityModels.Product.Offcode", "Offcode")
                        .WithMany("Products")
                        .HasForeignKey("OffCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreUniversityModels.Product.Product", "Product")
                        .WithMany("Offcodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offcode");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreUniversityModels.User.UserRelations.User_Role", b =>
                {
                    b.HasOne("StoreUniversityModels.User.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreUniversityModels.User.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreUniversityModels.User.User_Favorits", b =>
                {
                    b.HasOne("StoreUniversityModels.Product.Product", "product")
                        .WithMany("UserFavorits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreUniversityModels.User.User", "User")
                        .WithMany("Favorits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("product");
                });

            modelBuilder.Entity("StoreUniversityModels.Wallet.Wallet", b =>
                {
                    b.HasOne("StoreUniversityModels.Wallet.WalletType", "Type")
                        .WithMany("Wallets")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreUniversityModels.User.User", "user")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("user");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Offcode", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreUniversityModels.Product.Product", b =>
                {
                    b.Navigation("Offcodes");

                    b.Navigation("UserFavorits");

                    b.Navigation("images");
                });

            modelBuilder.Entity("StoreUniversityModels.User.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StoreUniversityModels.User.User", b =>
                {
                    b.Navigation("Favorits");

                    b.Navigation("Roles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("StoreUniversityModels.Wallet.WalletType", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
